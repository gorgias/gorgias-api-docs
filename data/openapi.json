{"definitions": {"Account": {"description": "Represents a company's account on Gorgias. Store all account-wide settings.", "properties": {"created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "domain": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "meta": {"type": "string"}, "roles": {"items": {"type": "string"}, "type": "array"}, "stripe_id": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}, "required": ["domain"], "type": "object"}, "Action": {"properties": {"arguments": {"description": "Functional arguments", "type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "description": {"description": "A longer text explaining what the action is supposed to do.", "nullable": true, "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "macro": {"items": {"type": "string"}, "type": "array"}, "name": {"description": "System name of the action", "type": "string"}, "title": {"description": "User defined title of the action", "type": "string"}, "type": {"description": "Shows if an action is user or system defined", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["title", "arguments", "name"], "type": "object"}, "Activity": {"properties": {"events": {"items": {"$ref": "#/definitions/ActivityEvent"}, "type": "array"}, "views": {"items": {"$ref": "#/definitions/ViewColumn"}, "type": "array"}}, "type": "object"}, "ActivityEvent": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "data": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "object": {"$ref": "#/definitions/Ticket"}, "object_id": {"format": "int32", "type": "integer"}, "object_type": {"type": "string"}, "type": {"description": "Event types are used to discriminate between events.", "meta": {"enum": ["ticket-created", "ticket-updated"], "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}, "required": ["type"], "type": "object"}, "Attachment": {"properties": {"content_type": {"description": "The type of the file.", "example": "application/pdf", "type": "string"}, "name": {"description": "The name of the file.", "example": "file.pdf", "type": "string"}, "size": {"description": "The size of the file, in bytes.", "example": "784554", "format": "int32", "type": "integer"}, "url": {"description": "The URL to access to the attached file.", "example": "https://gorgias.io/attachments/file.pdf", "format": "url", "type": "string"}}, "required": ["url", "name", "size", "content_type"], "type": "object"}, "CustomerRating": {"properties": {"comment": {"description": "The comment sent by the customer.", "example": "Such speed, much pertinent.", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "rating": {"description": "The level of satisfaction.", "example": 2, "format": "int32", "type": "integer"}, "rating_datetime": {"format": "date-time", "type": "string"}, "sent_datetime": {"description": "When the rating was sent.", "format": "date-time", "type": "string"}, "source": {"type": "string"}, "ticket_id": {"description": "The ID of the ticket attached to this rating.", "example": 12, "format": "int32", "type": "integer"}, "uri": {"description": "URI of the object", "type": "string"}}, "type": "object"}, "Event": {"properties": {"context": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "data": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "object_id": {"format": "int32", "type": "integer"}, "object_type": {"type": "string"}, "type": {"description": "Event types are used to discriminate between events.", "meta": {"enum": ["ticket-created", "ticket-updated"], "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user_id": {"format": "int32", "type": "integer"}, "version": {"type": "string"}}, "required": ["type"], "type": "object"}, "Group": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "description": {"type": "string"}, "external_id": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}}, "required": ["name"], "type": "object"}, "Integration": {"properties": {"connections": {"items": {"$ref": "#/definitions/UserConnection"}, "type": "array"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "decoration": {"type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "description": {"nullable": true, "type": "string"}, "facebook": {"$ref": "#/definitions/IntegrationFacebook", "meta": {"exclude": ["integration"]}}, "http": {"$ref": "#/definitions/IntegrationHTTP", "meta": {"exclude": ["integration"]}}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "locked_datetime": {"format": "date-time", "type": "string"}, "mappings": {"items": {"$ref": "#/definitions/IntegrationMapping"}, "meta": {"exclude": ["integration"]}, "type": "array"}, "meta": {"type": "string"}, "name": {"type": "string"}, "smooch": {"$ref": "#/definitions/IntegrationSmooch", "meta": {"only": ["id"]}}, "type": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["type", "name"], "type": "object"}, "IntegrationFacebook": {"properties": {"about": {"type": "string"}, "callback_url": {"type": "string"}, "category": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "integration": {"type": "string"}, "name": {"type": "string"}, "page_id": {"type": "string"}, "picture": {"type": "string"}, "settings": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}}, "type": "object"}, "IntegrationHTTP": {"properties": {"form": {"nullable": true, "type": "string"}, "headers": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "integration": {"$ref": "#/definitions/Integration"}, "method": {"type": "string"}, "request_content_type": {"default": "application/json", "type": "string"}, "response_content_type": {"default": "application/json", "type": "string"}, "triggers": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "url": {"type": "string"}}, "required": ["url"], "type": "object"}, "IntegrationMapping": {"properties": {"destination_key": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "integration": {"type": "string"}, "order": {"format": "int32", "type": "integer"}, "source_key": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}}, "type": "object"}, "IntegrationSmooch": {"properties": {"callback_url": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "integration": {"$ref": "#/definitions/Integration"}, "settings": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "webhook_id": {"type": "string"}, "webhook_secret": {"type": "string"}}, "required": ["webhook_id", "webhook_secret"], "type": "object"}, "Macro": {"properties": {"actions": {"items": {"$ref": "#/definitions/Action"}, "type": "array"}, "category": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "external_id": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "ticket_messages": {"items": {"type": "string"}, "type": "array"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["name"], "type": "object"}, "Organization": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "description": {"type": "string"}, "external_id": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "url": {"type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}}, "required": ["name"], "type": "object"}, "Role": {"properties": {"account": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "description": {"type": "string"}, "external_id": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}}, "required": ["name"], "type": "object"}, "Rule": {"properties": {"code": {"type": "string"}, "code_ast": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "crontab": {"type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "description": {"type": "string"}, "event_types": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "priority": {"format": "int32", "type": "integer"}, "title": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}, "required": ["title"], "type": "object"}, "Stats": {"description": "Basic statistics of the account.", "properties": {"data": {"type": "string"}, "meta": {"type": "string"}}, "type": "object"}, "Tag": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"meta": {"operators": {"contains": {"label": "contains"}, "eq": {"label": "is"}, "neq": {"label": "is not"}, "notContains": {"label": "does not contain"}}, "rules": {"widget": "input"}}, "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}}, "required": ["name"], "type": "object"}, "Ticket": {"description": "A Ticket is a conversation between a company and a user.", "properties": {"assignee_user": {"$ref": "#/definitions/User", "description": "The agent assigned to this ticket.", "example": {"email": "agent-smith@gorgias.io", "firstname": "John", "id": 4, "lastname": "Smith", "name": "John Smith"}}, "channel": {"description": "The channel used to communicate with the user on this ticket.", "meta": {"enum": ["email", "phone", "sms", "chat", "twitter", "facebook", "api"], "filters": {"widget": "multi-select"}, "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}, "closed_datetime": {"description": "When the ticket was closed for the last time.", "format": "date-time", "meta": {"operators": {"gt": {"label": "is greater than"}, "gte": {"label": "is greater or equal to"}, "lt": {"label": "is less than"}, "lte": {"label": "is less or equal to"}}, "rules": {"widget": "input"}}, "type": "string"}, "created_datetime": {"description": "When the ticket was created.", "format": "date-time", "meta": {"operators": {"gt": {"label": "is greater than"}, "gte": {"label": "is greater or equal to"}, "lt": {"label": "is less than"}, "lte": {"label": "is less or equal to"}}, "rules": {"widget": "input"}}, "type": "string"}, "customer_ratings": {"description": "The ratings given by users about the quality of the support on this ticket.", "items": {"$ref": "#/definitions/CustomerRating"}, "type": "array"}, "external_id": {"description": "Another ID for the ticket. Can be set freely.", "type": "string"}, "from_agent": {"description": "Indicates whether the ticket was created by an agent or by a user.", "meta": {"enum": ["true", "false"], "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}, "show": ["rules"], "widget": "select"}, "type": "boolean"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "messages": {"description": "All the messages of the ticket.", "items": {"$ref": "#/definitions/TicketMessage"}, "type": "array"}, "meta": {"description": "Extra metadatas about the ticket.", "example": {}, "type": "string"}, "opened_datetime": {"description": "When the ticket was opened for the first time.", "format": "date-time", "meta": {"operators": {"gt": {"label": "is greater than"}, "gte": {"label": "is greater or equal to"}, "lt": {"label": "is less than"}, "lte": {"label": "is less or equal to"}}, "rules": {"widget": "input"}}, "type": "string"}, "priority": {"default": "normal", "description": "Indicates the importance of the ticket.", "meta": {"enum": ["low", "normal", "high", "critical"], "filters": {"widget": "select"}, "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}, "receiver": {"$ref": "#/definitions/User", "description": "The original receiver of the ticket.", "example": {"email": "receiver@gorgias.io", "firstname": "Receiver", "id": 8, "lastname": "Doe", "name": "Receiver Doe"}}, "requester": {"$ref": "#/definitions/User", "description": "The user who is requesting something in this ticket.", "example": {"channels": [{"address": "receiver@gorgias.io", "id": 451654, "type": "email"}], "customer": {"orders": [{"currency": "dollars", "item": "Washing machine", "price": 500}, {"currency": "dollars", "item": "Hammer", "price": 12}, {"currency": "dollars", "item": "Game of Thrones - Blu-ray Integral", "price": 80}]}, "email": "sender@gorgias.io", "firstname": "Sender", "id": 7, "lastname": "Doe", "name": "Sender Doe"}}, "sender": {"$ref": "#/definitions/User", "description": "The user who created this ticket. Most of the time it will be the same as the sender, but not always: for example if an agent created the ticket on behalf of a user, the agent would be the sender when the user would be the requester.", "example": {"email": "sender@gorgias.io", "firstname": "Sender", "id": 7, "lastname": "Doe", "name": "Sender Doe"}}, "status": {"default": "new", "description": "Ticket status is used for managing the lifecycle of the ticket", "meta": {"enum": ["new", "open", "closed"], "filters": {"widget": "multi-select"}, "operators": {"contains": {"label": "contains"}, "eq": {"label": "is"}, "neq": {"label": "is not"}, "notContains": {"label": "does not contain"}}, "rules": {"widget": "select"}}, "type": "string"}, "subject": {"description": "The subject of the ticket.", "example": "Refund request", "meta": {"operators": {"contains": {"label": "contains"}, "endsWith": {"label": "ends with"}, "eq": {"label": "is"}, "neq": {"label": "is not"}, "notContains": {"label": "does not contain"}, "startsWith": {"label": "starts with"}}, "rules": {"widget": "input"}}, "type": "string"}, "tags": {"description": "The tags associated with the ticket.", "example": [{"id": 5, "name": "refund", "uri": "https://gorgias.gorgias.io/api/tags/5/"}], "items": {"$ref": "#/definitions/Tag"}, "meta": {"operators": {"contains": {"label": "contains"}, "eq": {"label": "is"}, "neq": {"label": "is not"}, "notContains": {"label": "does not contain"}}, "rules": {"widget": "select"}}, "type": "array"}, "updated_datetime": {"description": "When the ticket was updated for the last time.", "format": "date-time", "meta": {"operators": {"gt": {"label": "is greater than"}, "gte": {"label": "is greater or equal to"}, "lt": {"label": "is less than"}, "lte": {"label": "is less or equal to"}}, "rules": {"widget": "input"}}, "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "via": {"description": "Indicates via which means this ticket was created. For example, a ticket of channel `email` could have been created through the API because of an integration; the `via` would then be `api`.", "meta": {"enum": ["email", "phone", "sms", "chat", "twitter", "facebook", "api", "form", "helpdesk", "app", "rule"], "filters": {"widget": "multi-select"}, "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}}, "required": ["receiver", "channel", "sender", "messages", "via", "requester"], "type": "object"}, "TicketMessage": {"properties": {"actions": {"description": "An array of actions executed with this message.", "example": [], "many": true, "type": "string"}, "attachments": {"description": "An array of files attached to this message.", "example": [], "items": {"$ref": "#/definitions/Attachment"}, "type": "array"}, "body_html": {"description": "The HTML version of the body of this message, if there's one.", "example": "Hello,<br><br>\n\n        I'd like you to refund me, because I don't like your product.<br><br>\n\n        Cheers,<br>\n        John Doe\n        ", "type": "string"}, "body_text": {"description": "The text version of the body of this message.", "example": "Hello,\n\n        I'd like you to refund me, because I don't like your product.\n\n        Cheers,\n        John Doe\n        ", "meta": {"operators": {"contains": {"label": "contains"}, "endsWith": {"label": "ends with"}, "eq": {"label": "is"}, "neq": {"label": "is not"}, "notContains": {"label": "does not contain"}, "startsWith": {"label": "starts with"}}}, "type": "string"}, "channel": {"description": "The channel used to send this message.", "example": "email", "meta": {"enum": ["email", "phone", "sms", "chat", "twitter", "facebook", "api"], "filters": {"widget": "multi-select"}, "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}, "created_datetime": {"description": "When the message was created.", "format": "date-time", "type": "string"}, "external_id": {"description": "Another ID for the message. Can be set freely.", "example": "78545", "type": "string"}, "from_agent": {"description": "Indicates whether this message was sent by an agent or by a user.", "type": "boolean"}, "headers": {"description": "Headers sent with this message.", "example": {}, "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "macros": {"description": "An array of macros applied to this message.", "example": [{"id": 5132}], "items": {"$ref": "#/definitions/Macro"}, "type": "array"}, "meta": {"description": "Extra metadatas about this message.", "example": {}, "type": "string"}, "public": {"default": true, "description": "Indicates whether this message was sent to the user, or is an internal note.", "type": "boolean"}, "receiver": {"$ref": "#/definitions/User", "description": "The user who received this message.", "example": {"id": 8}}, "sender": {"$ref": "#/definitions/User", "description": "The user who sent this message.", "example": {"id": 7}}, "sent_datetime": {"format": "date-time", "type": "string"}, "source": {"description": "A JSON field which stores all data related to who sent this message, through which channel, and to whom. This is necessary in addition of the sender/channel/receiver field because this is immutable: even if the sender changes his email address, the address he used to send this message originally will still be stored here.", "example": {"from": {"address": "sender@gorgias.io", "id": 7, "name": "Sender Doe"}, "to": [{"address": "receiver@gorgias.io", "id": 8, "name": "Receiver Doe"}], "type": "email"}, "type": "string"}, "stripped_html": {"example": null, "type": "string"}, "stripped_signature": {"example": null, "type": "string"}, "stripped_text": {"example": null, "type": "string"}, "subject": {"description": "The subject of the message.", "example": "Re:Refund request", "type": "string"}, "ticket_id": {"description": "The ID of the ticket this message is associated with.", "example": 12, "format": "int32", "type": "integer"}, "uri": {"description": "URI of the object", "type": "string"}, "via": {"description": "Indicates from which origin the ticket has been created. For example, it can be `api`, `helpdesk`, `user_form`....", "example": "api", "meta": {"enum": ["email", "phone", "sms", "chat", "twitter", "facebook", "api", "form", "helpdesk", "app", "rule"], "filters": {"widget": "multi-select"}, "operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}, "rules": {"widget": "select"}}, "type": "string"}}, "required": ["channel", "sender", "receiver", "via"], "type": "object"}, "User": {"description": "Represents a user.", "properties": {"active": {"type": "boolean"}, "auths": {"items": {"$ref": "#/definitions/UserAuth"}, "type": "array"}, "channels": {"items": {"$ref": "#/definitions/UserChannel"}, "type": "array"}, "country": {"type": "string"}, "customer": {"type": "string"}, "email": {"format": "email", "type": "string"}, "firstname": {"type": "string"}, "groups": {"items": {"$ref": "#/definitions/Group"}, "type": "array"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "language": {"type": "string"}, "lastname": {"type": "string"}, "meta": {"type": "string"}, "name": {"type": "string"}, "organizations": {"items": {"$ref": "#/definitions/Organization"}, "type": "array"}, "password": {"type": "string"}, "roles": {"items": {"$ref": "#/definitions/Role"}, "type": "array"}, "signature_html": {"type": "string"}, "signature_text": {"type": "string"}, "timezone": {"default": "UTC", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}}, "required": ["roles"], "type": "object"}, "UserAuth": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "data": {"type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "type": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"type": "string"}, "user_id": {"format": "int32", "type": "integer"}}, "type": "object"}, "UserChannel": {"properties": {"address": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "preferred": {"type": "boolean"}, "type": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["type", "address"], "type": "object"}, "UserConnection": {"properties": {"created_datetime": {"format": "date-time", "type": "string"}, "data": {"type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "type": {"type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"type": "string"}, "user_id": {"format": "int32", "type": "integer"}}, "type": "object"}, "View": {"properties": {"count": {"format": "int32", "type": "integer"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "decoration": {"type": "string"}, "display_order": {"format": "int32", "type": "integer"}, "fields": {"items": {"properties": {"display_order": {"default": 99, "format": "int32", "type": "integer"}, "filter": {"type": "string"}, "name": {"type": "string"}, "title": {"type": "string"}, "type": {"default": "plain", "type": "string"}, "visible": {"type": "boolean"}, "width": {"default": 1, "format": "int32", "type": "integer"}}, "required": ["name", "title", "type"], "type": "object"}, "type": "array"}, "filters": {"type": "string"}, "filters_ast": {"type": "string"}, "group_by": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "order_by": {"default": "updated_datetime", "type": "string"}, "order_dir": {"default": "desc", "type": "string"}, "search": {"type": "string"}, "slug": {"type": "string"}, "type": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["user", "slug"], "type": "object"}, "ViewColumn": {"properties": {"count": {"format": "int32", "type": "integer"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "decoration": {"type": "string"}, "display_order": {"format": "int32", "type": "integer"}, "fields": {"items": {"properties": {"display_order": {"default": 99, "format": "int32", "type": "integer"}, "filter": {"type": "string"}, "name": {"type": "string"}, "title": {"type": "string"}, "type": {"default": "plain", "type": "string"}, "visible": {"type": "boolean"}, "width": {"default": 1, "format": "int32", "type": "integer"}}, "required": ["name", "title", "type"], "type": "object"}, "type": "array"}, "filters": {"type": "string"}, "filters_ast": {"type": "string"}, "group_by": {"type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "name": {"type": "string"}, "order_by": {"default": "updated_datetime", "type": "string"}, "order_dir": {"default": "desc", "type": "string"}, "search": {"type": "string"}, "slug": {"type": "string"}, "type": {"type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["user", "slug"], "type": "object"}, "Widget": {"description": "A widget is a container that is displayed in the sidebar and contains a list of fields", "properties": {"context": {"default": "ticket", "description": "In what context to display this widget", "type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "id": {"description": "Primary key of the object", "format": "int32", "meta": {"operators": {"eq": {"label": "is"}, "neq": {"label": "is not"}}}, "type": "integer"}, "order": {"description": "Order in which widgets are displayed. Lowest first.", "format": "int32", "type": "integer"}, "template": {"type": "string"}, "type": {"description": "Type of the widget is used for rendering", "enum": ["custom", "stripe"], "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "type": "string"}, "user": {"$ref": "#/definitions/User"}}, "required": ["type", "template"], "type": "object"}}, "description": "The new generation helpdesk", "info": {"title": "Gorgias", "version": "0.0.1"}, "parameters": {"id": {"description": "ID of the target object", "format": "int64", "in": "path", "name": "id", "required": true, "type": "integer"}, "page": {"description": "the number of the page you want to fetch", "format": "int64", "in": "query", "name": "page", "required": false, "type": "integer"}, "per_page": {"description": "the number of tickets per page you're expecting", "format": "int64", "in": "query", "name": "per_page", "required": false, "type": "integer"}, "ticket_id": {"description": "ID of the ticket", "format": "int64", "in": "path", "name": "ticket_id", "required": true, "type": "integer"}, "user_id": {"description": "ID of the user", "format": "int64", "in": "path", "name": "user_id", "required": true, "type": "integer"}, "view_id": {"description": "the id of the view which you want to filter the tickets", "format": "int64", "in": "query", "name": "view_id", "required": false, "type": "integer"}}, "paths": {"/api/actions/": {"get": {"description": "Get all action of the account of the user, paginated.", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Action"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all actions", "tags": ["Action"]}, "post": {"consumes": ["application/json"], "description": "Create a new action", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Action"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create an action", "tags": ["Action"]}}, "/api/actions/{id}/": {"delete": {"description": "Delete an action", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete an action", "tags": ["Action"]}, "get": {"description": "Get an action based on {id}", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Action"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get a single action", "tags": ["Action"]}, "put": {"consumes": ["application/json"], "description": "Update an action", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/Action"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update an action", "tags": ["Action"]}}, "/api/activity/": {"post": {"consumes": ["application/json"], "description": "Takes a list of `EventSchema` and dumps a `ActivitySchema`", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Activity"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create activities", "tags": ["Activity"]}}, "/api/activity/{id}/": {}, "/api/events/": {"get": {"description": "Get all events of the account of the user, paginated.", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Event"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all events", "tags": ["Event"]}}, "/api/events/{id}/": {}, "/api/integrations/": {"get": {"description": "Get the list of all integrations (active or not) of the current account", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all integration", "tags": ["Integration"]}, "post": {"consumes": ["application/json"], "description": "Create a new integration with a new or existing connection to an external service.", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Integration"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create an integration", "tags": ["Integration"]}}, "/api/integrations/{id}/": {"delete": {"description": "Delete an existing integration with the linked connection along", "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete an integration", "tags": ["Integration"]}, "get": {"description": "Fetch an integration's data with the linked connection.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Integration"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get an integration", "tags": ["Integration"]}, "put": {"consumes": ["application/json"], "description": "Update an existing integration or its connection", "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/Integration"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update an integration", "tags": ["Integration"]}}, "/api/rules/": {"get": {"description": "Fetch all the rules of the current account", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Rule"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Fetch all rules", "tags": ["Rule"]}, "post": {"consumes": ["application/json"], "description": "Create a new Rule", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Rule"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create a Rule", "tags": ["Rule"]}}, "/api/rules/{id}/": {"get": {"description": "Fetch a single Rule", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Rule"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Fetch a single Rule", "tags": ["Rule"]}, "put": {"consumes": ["application/json"], "description": "Edit an existing Rule", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/Rule"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Edit a Rule", "tags": ["Rule"]}}, "/api/stats/": {"get": {"description": "Get scalar statistics about tickets.", "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Stats"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get scalar statistics about tickets.", "tags": ["Statistics"]}}, "/api/tickets/": {"delete": {"description": "Delete a batch of tickets", "parameters": [{"in": "body", "name": "body", "schema": {"example": {"ids": [1, 7, 78, 12, 546]}, "properties": {"ids": {"description": "an array of ids of tickets you want to delete", "items": {"format": "int64", "minimum": 1, "type": "integer"}, "type": "array"}}, "type": "object"}}], "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete a batch of tickets", "tags": ["Ticket"]}, "get": {"description": "Retrieve a list of tickets. If the {view} argument is present in the URL, then the list will correspond to this view's constraints.\n", "parameters": [{"$ref": "#/parameters/view_id"}, {"$ref": "#/parameters/page"}, {"$ref": "#/parameters/per_page"}], "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve a list of tickets", "tags": ["Ticket"]}, "post": {"consumes": ["application/json"], "description": "Create a new Ticket along with its Messages.", "parameters": [{"description": "the data of the Ticket you want to create", "in": "body", "name": "body", "schema": {"$ref": "#/definitions/Ticket"}}], "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Ticket"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create a new Ticket", "tags": ["Ticket"]}, "put": {"consumes": ["application/json"], "description": "When experimenting with views in the app sometimes it's useful to query something without saving a view", "parameters": [{"in": "body", "name": "body", "schema": {"example": {"view": {"id": 1}}, "properties": {"view": {"schema": {"$ref": "#/definitions/View"}, "type": "object"}}, "type": "object"}}], "produces": ["application/json"], "responses": {"202": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Perform a ticket list query with an unsaved view", "tags": ["Ticket"]}}, "/api/tickets/{id}/": {"get": {"description": "Retrieve a single Ticket, identified by the URL parameter {id}.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Ticket"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve a single Ticket", "tags": ["Ticket"]}, "put": {"consumes": ["application/json"], "description": "Update a Ticket identified by the URL parameter {id} and return it.", "parameters": [{"$ref": "#/parameters/id"}, {"description": "the data of the Ticket you want to update", "in": "body", "name": "body", "schema": {"$ref": "#/definitions/Ticket"}}], "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/Ticket"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update a Ticket", "tags": ["Ticket"]}}, "/api/tickets/{ticket_id}/messages/": {"get": {"description": "Retrieve the list of Messages of a Ticket identified by the URL parameter {ticket_id}", "parameters": [{"$ref": "#/parameters/ticket_id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/TicketMessage"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve the list of Messages of a Ticket", "tags": ["Ticket"]}}, "/api/tickets/{ticket_id}/messages/{id}/": {"delete": {"description": "Delete a Message of a specific Ticket", "parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}], "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete a Message", "tags": ["Ticket"]}, "get": {"description": "Retrieve a single TicketMessage identified by the URL parameters {ticket_id} and {id}.", "parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/TicketMessage"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve a single TicketMessage", "tags": ["Ticket"]}, "put": {"consumes": ["application/json"], "description": "Update a TicketMessage and return it.", "parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}, {"description": "the new data you want to set on the Message", "in": "body", "name": "body", "schema": {"$ref": "#/definitions/TicketMessage"}}], "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/TicketMessage"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update a TicketMessage", "tags": ["Ticket"]}}, "/api/upload/": {}, "/api/upload/{id}/": {}, "/api/users/": {"get": {"description": "Retrieve all users of the account of the current user, paginated.", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve list of users", "tags": ["User"]}, "post": {"consumes": ["application/json"], "description": "Create a new user linked to the current user's account. It's role can be any combination of \"user\", \"agent\" and \"admin\".\n", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create a user", "tags": ["User"]}}, "/api/users/roles/": {"get": {"description": "Retrieve all roles of the account of the current user, paginated.", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Role"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve list of roles", "tags": ["User"]}, "post": {"consumes": ["application/json"], "description": "Create a new role linked to the current user's account.\n", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Role"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create a role", "tags": ["User"]}}, "/api/users/roles/{id}/": {"get": {"description": "Retrieve a single role, identified by the URL parameter {id}.\n", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Role"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve a single role", "tags": ["User"]}}, "/api/users/{id}/": {"delete": {"description": "Delete a user identified by the URL parameter {id}.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete a user", "tags": ["User"]}, "get": {"description": "Retrieve a single user, identified by the URL parameter {id}. If {id} = 0, the current user is returned.\n", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve a single user", "tags": ["User"]}, "put": {"consumes": ["application/json"], "description": "Update a user's fields, and return it's new version.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update a user", "tags": ["User"]}}, "/api/users/{user_id}/events/": {"get": {"description": "Get all events of the specified user, sorted by DESC created_datetime.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Event"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all user's events", "tags": ["User"]}}, "/api/users/{user_id}/events/{id}/": {}, "/api/users/{user_id}/tickets/": {"get": {"description": "Get all tickets of the specified user, sorted by DESC created_datetime.", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all user's tickets", "tags": ["User"]}}, "/api/users/{user_id}/tickets/{id}/": {}, "/api/widgets/": {"get": {"description": "Get all widgets of the account of the user, paginated.", "produces": ["application/json"], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Widget"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all widgets paginated", "tags": ["Widget"]}, "post": {"consumes": ["application/json"], "description": "Create a new widget that will be displayed in the sidebar.", "produces": ["application/json"], "responses": {"201": {"schema": {"$ref": "#/definitions/Widget"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create a widget", "tags": ["Widget"]}, "put": {"consumes": ["application/json"], "description": "Create/Update/Delete widgets of current account and passed context.", "produces": ["application/json"], "responses": {"202": {"schema": {"items": {"$ref": "#/definitions/Widget"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Create/Update/Delete widgets", "tags": ["Widget"]}}, "/api/widgets/{id}/": {"delete": {"description": "Delete a widget", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"204": {"description": "No content."}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Delete a widget", "tags": ["Widget"]}, "get": {"description": "Get a widget based on {id}", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"200": {"schema": {"$ref": "#/definitions/Widget"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get a single widget", "tags": ["Widget"]}, "put": {"consumes": ["application/json"], "description": "Update a widget", "parameters": [{"$ref": "#/parameters/id"}], "produces": ["application/json"], "responses": {"202": {"schema": {"$ref": "#/definitions/Widget"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Update a widget", "tags": ["Widget"]}}}, "swagger": "2.0", "tags": [{"description": "Latest activity when the user is walking around.", "name": "Activity"}, {"description": "Contains all the endpoints about how to manage Tickets and their Messages.", "name": "Ticket"}, {"description": "Contains all the endpoints about how to manage users and their roles / groups / organisations.", "name": "User"}, {"description": "Receive a list of files and upload them in Google Storage", "name": "Upload"}, {"description": "Allows users to create or enable integrations for their account", "name": "Integration"}, {"description": "Endpoints to manipulate Rules.", "name": "Rule"}, {"description": "Contains every resources concerning the statistics.", "name": "Statistics"}]}