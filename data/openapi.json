{"parameters": {"view_id": {"name": "view_id", "description": "the id of the view which you want to filter the tickets", "required": false, "type": "integer", "in": "query", "format": "int64"}, "id": {"name": "id", "description": "ID of the target object", "required": true, "type": "integer", "in": "path", "format": "int64"}, "user_id": {"name": "user_id", "description": "ID of the user", "required": true, "type": "integer", "in": "path", "format": "int64"}, "ticket_id": {"name": "ticket_id", "description": "ID of the ticket", "required": true, "type": "integer", "in": "path", "format": "int64"}, "page": {"name": "page", "description": "the number of the page you want to fetch", "required": false, "type": "integer", "in": "query", "format": "int64"}, "per_page": {"name": "per_page", "description": "the number of tickets per page you're expecting", "required": false, "type": "integer", "in": "query", "format": "int64"}}, "definitions": {"IntegrationHTTP": {"required": ["url"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "url": {"type": "string"}, "method": {"type": "string"}, "headers": {"type": "string"}, "form": {"type": "string"}, "request_content_type": {"default": "application/json", "type": "string"}, "response_content_type": {"default": "application/json", "type": "string"}, "triggers": {"type": "string"}, "integration": {"$ref": "#/definitions/Integration"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Stats": {"description": "Basic statistics of the account.", "type": "object", "properties": {"data": {"readOnly": true, "type": "string"}, "meta": {"readOnly": true, "type": "string"}}}, "Widget": {"description": "A widget is a container that is displayed in the sidebar and contains a list of fields", "required": ["type", "template"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"enum": ["custom", "stripe"], "description": "Type of the widget is used for rendering", "type": "string"}, "context": {"default": "ticket", "description": "In what context to display this widget", "type": "string"}, "order": {"format": "int32", "description": "Order in which widgets are displayed. Lowest first.", "type": "integer"}, "template": {"type": "string"}, "created_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "updated_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "user": {"readOnly": true, "$ref": "#/definitions/User"}}}, "Attachment": {"required": ["name", "content_type", "size", "url"], "type": "object", "properties": {"name": {"example": "file.pdf", "description": "The name of the file.", "type": "string"}, "content_type": {"example": "application/pdf", "description": "The type of the file.", "type": "string"}, "size": {"example": "784554", "format": "int32", "description": "The size of the file, in bytes.", "type": "integer"}, "url": {"example": "https://gorgias.io/attachments/file.pdf", "format": "url", "description": "The URL to access to the attached file.", "type": "string"}}}, "IntegrationFacebook": {"type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "page_id": {"type": "string"}, "callback_url": {"type": "string"}, "settings": {"type": "string"}, "about": {"type": "string"}, "category": {"type": "string"}, "picture": {"type": "string"}, "name": {"type": "string"}, "integration": {"type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "CustomerRating": {"type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "sent_datetime": {"format": "date-time", "description": "When the rating was sent.", "type": "string"}, "rating_datetime": {"format": "date-time", "type": "string"}, "rating": {"example": 2, "format": "int32", "description": "The level of satisfaction.", "type": "integer"}, "comment": {"example": "Such speed, much pertinent.", "description": "The comment sent by the customer.", "type": "string"}, "source": {"type": "object"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "ticket_id": {"example": 12, "format": "int32", "description": "The ID of the ticket attached to this rating.", "type": "integer"}}}, "IntegrationSmooch": {"required": ["webhook_id", "webhook_secret"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "callback_url": {"type": "string"}, "webhook_id": {"type": "string"}, "webhook_secret": {"type": "string"}, "settings": {"type": "string"}, "integration": {"$ref": "#/definitions/Integration"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "TicketMessage": {"required": ["sender", "receiver", "channel", "via"], "type": "object", "properties": {"sender": {"example": {"id": 7}, "description": "The user who sent this message.", "$ref": "#/definitions/User"}, "receiver": {"example": {"id": 8}, "description": "The user who received this message.", "$ref": "#/definitions/User"}, "macros": {"example": [{"id": 5132}], "items": {"$ref": "#/definitions/Macro"}, "description": "An array of macros applied to this message.", "type": "array"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"example": "78545", "description": "Another ID for the message. Can be set freely.", "type": "string"}, "public": {"default": true, "description": "Indicates whether this message was sent to the user, or is an internal note.", "type": "boolean"}, "channel": {"example": "email", "description": "The channel used to send this message.", "type": "string"}, "via": {"example": "api", "description": "Indicates from which origin the ticket has been created. For example, it can be `api`, `helpdesk`, `user_form`....", "type": "string"}, "source": {"example": {"to": [{"name": "Receiver Doe", "address": "receiver@gorgias.io", "id": 8}], "from": {"name": "Sender Doe", "address": "sender@gorgias.io", "id": 7}, "type": "email"}, "description": "A JSON field which stores all data related to who sent this message, through which channel, and to whom. This is necessary in addition of the sender/channel/receiver field because this is immutable: even if the sender changes his email address, the address he used to send this message originally will still be stored here.", "type": "object"}, "from_agent": {"description": "Indicates whether this message was sent by an agent or by a user.", "type": "boolean"}, "subject": {"example": "Re:Refund request", "description": "The subject of the message.", "type": "string"}, "body_text": {"example": "Hello,\n\n        I'd like you to refund me, because I don't like your product.\n\n        Cheers,\n        John Doe\n        ", "description": "The text version of the body of this message.", "type": "string"}, "body_html": {"example": "Hello,<br><br>\n\n        I'd like you to refund me, because I don't like your product.<br><br>\n\n        Cheers,<br>\n        John Doe\n        ", "description": "The HTML version of the body of this message, if there's one.", "type": "string"}, "stripped_text": {"example": null, "type": "string"}, "stripped_html": {"example": null, "type": "string"}, "stripped_signature": {"example": null, "type": "string"}, "headers": {"example": {}, "description": "Headers sent with this message.", "type": "string"}, "attachments": {"example": [], "items": {"$ref": "#/definitions/Attachment"}, "description": "An array of files attached to this message.", "type": "array"}, "meta": {"example": {}, "description": "Extra metadatas about this message.", "type": "string"}, "created_datetime": {"format": "date-time", "description": "When the message was created.", "type": "string"}, "sent_datetime": {"format": "date-time", "type": "string"}, "actions": {"example": [], "description": "An array of actions executed with this message.", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "ticket_id": {"example": 12, "format": "int32", "description": "The ID of the ticket this message is associated with.", "type": "integer"}}}, "IntegrationMapping": {"type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "order": {"format": "int32", "type": "integer"}, "source_key": {"type": "string"}, "destination_key": {"type": "string"}, "integration": {"type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Activity": {"type": "object", "properties": {"events": {"items": {"$ref": "#/definitions/ActivityEvent"}, "type": "array"}, "views": {"items": {"$ref": "#/definitions/ViewColumn"}, "type": "array"}}}, "Role": {"required": ["name"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "account": {"type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "View": {"required": ["user", "slug"], "type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"type": "string"}, "slug": {"type": "string"}, "name": {"type": "string"}, "decoration": {"type": "string"}, "filters": {"type": "string"}, "filters_ast": {"type": "string"}, "search": {"type": "string"}, "display_order": {"format": "int32", "type": "integer"}, "fields": {"items": {"required": ["name", "title", "type"], "properties": {"name": {"type": "string"}, "title": {"type": "string"}, "visible": {"type": "boolean"}, "filter": {"type": "string"}, "type": {"default": "plain", "type": "string"}, "width": {"default": 1, "format": "int32", "type": "integer"}, "display_order": {"default": 99, "format": "int32", "type": "integer"}}, "type": "object"}, "type": "array"}, "group_by": {"type": "string"}, "order_by": {"default": "updated_datetime", "type": "string"}, "order_dir": {"default": "desc", "type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "count": {"format": "int32", "readOnly": true, "type": "integer"}}}, "Organization": {"required": ["name"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"type": "string"}, "url": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Action": {"required": ["name", "title", "arguments"], "type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"description": "Shows if an action is user or system defined", "type": "string"}, "name": {"description": "System name of the action", "type": "string"}, "title": {"description": "User defined title of the action", "type": "string"}, "description": {"description": "A longer text explaining what the action is supposed to do.", "type": "string"}, "arguments": {"description": "Functional arguments", "type": "string"}, "created_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "macro": {"items": {"type": "string"}, "type": "array"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Macro": {"required": ["name"], "type": "object", "properties": {"actions": {"items": {"$ref": "#/definitions/Action"}, "type": "array"}, "category": {"type": "string"}, "user": {"$ref": "#/definitions/User"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"type": "string"}, "name": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "ticket_messages": {"items": {"type": "string"}, "type": "array"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "UserAuth": {"type": "object", "properties": {"user": {"type": "string"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "type": {"readOnly": true, "type": "string"}, "name": {"type": "string"}, "data": {"readOnly": true, "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}}, "UserConnection": {"type": "object", "properties": {"user": {"type": "string"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"readOnly": true, "type": "string"}, "data": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}}, "ViewColumn": {"required": ["user", "slug"], "type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"type": "string"}, "slug": {"type": "string"}, "name": {"type": "string"}, "decoration": {"type": "string"}, "filters": {"type": "string"}, "filters_ast": {"type": "string"}, "search": {"type": "string"}, "display_order": {"format": "int32", "type": "integer"}, "fields": {"items": {"required": ["name", "title", "type"], "properties": {"name": {"type": "string"}, "title": {"type": "string"}, "visible": {"type": "boolean"}, "filter": {"type": "string"}, "type": {"default": "plain", "type": "string"}, "width": {"default": 1, "format": "int32", "type": "integer"}, "display_order": {"default": 99, "format": "int32", "type": "integer"}}, "type": "object"}, "type": "array"}, "group_by": {"type": "string"}, "order_by": {"default": "updated_datetime", "type": "string"}, "order_dir": {"default": "desc", "type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "count": {"format": "int32", "readOnly": true, "type": "integer"}}}, "Tag": {"required": ["name"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "name": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "UserChannel": {"required": ["type", "address"], "type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"type": "string"}, "address": {"type": "string"}, "preferred": {"type": "boolean"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Account": {"description": "Represents a company's account on Gorgias. Store all account-wide settings.", "required": ["domain"], "type": "object", "properties": {"roles": {"items": {"type": "string"}, "type": "array"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "user_id": {"format": "int32", "type": "integer"}, "stripe_id": {"type": "string"}, "domain": {"type": "string"}, "meta": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "User": {"description": "Represents a user.", "required": ["roles"], "type": "object", "properties": {"channels": {"items": {"$ref": "#/definitions/UserChannel"}, "type": "array"}, "auths": {"items": {"$ref": "#/definitions/UserAuth"}, "readOnly": true, "type": "array"}, "roles": {"items": {"$ref": "#/definitions/Role"}, "type": "array"}, "groups": {"items": {"$ref": "#/definitions/Group"}, "type": "array"}, "organizations": {"items": {"$ref": "#/definitions/Organization"}, "type": "array"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "email": {"format": "email", "type": "string"}, "name": {"type": "string"}, "signature_text": {"type": "string"}, "signature_html": {"type": "string"}, "language": {"type": "string"}, "country": {"type": "string"}, "timezone": {"default": "UTC", "type": "string"}, "active": {"type": "boolean"}, "meta": {"type": "string"}, "customer": {"type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "password": {"type": "string"}, "firstname": {"readOnly": true, "type": "string"}, "lastname": {"readOnly": true, "type": "string"}}}, "Event": {"required": ["type"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "object_type": {"type": "string"}, "object_id": {"format": "int32", "type": "integer"}, "data": {"type": "string"}, "context": {"type": "string"}, "version": {"type": "string"}, "type": {"description": "Event types are used to discriminate between events.", "type": "string"}, "created_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "user_id": {"format": "int32", "type": "integer"}}}, "Integration": {"required": ["type", "name"], "type": "object", "properties": {"user": {"$ref": "#/definitions/User"}, "connections": {"items": {"$ref": "#/definitions/UserConnection"}, "type": "array"}, "http": {"example": {"form": {}, "url": "http://httpbin.org/post", "triggers": {"ticket-message-created": false, "ticket-created": true, "ticket-updated": false}, "request_content_type": "application/json", "headers": {}, "response_content_type": "application/json", "method": "POST"}, "$ref": "#/definitions/IntegrationHTTP"}, "mappings": {"example": {"order": 1, "source_key": "data.orders", "destination_key": "requester.customer.orders"}, "items": {"$ref": "#/definitions/IntegrationMapping"}, "type": "array"}, "facebook": {"example": {"name": "My Facebook Integration", "picture": {"data": {"is_silhouette": false, "url": "https://facebook.com/images/4645646453.jpg"}}, "category": "", "settings": {}, "page_id": "8a7f8s7f6", "about": "", "callback_url": "https://acme.gorgias.io/incoming/facebook/"}, "$ref": "#/definitions/IntegrationFacebook"}, "smooch": {"example": {"id": 12}, "$ref": "#/definitions/IntegrationSmooch"}, "locked_datetime": {"format": "date-time", "type": "string"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "type": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "decoration": {"type": "string"}, "meta": {"readOnly": true, "type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Rule": {"required": ["title"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "title": {"type": "string"}, "description": {"type": "string"}, "event_types": {"type": "string"}, "priority": {"format": "int32", "type": "integer"}, "code_ast": {"type": "string"}, "code": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "deactivated_datetime": {"format": "date-time", "type": "string"}, "deleted_datetime": {"format": "date-time", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "user_id": {"format": "int32", "type": "integer"}, "crontab": {"type": "string"}}}, "Group": {"required": ["name"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"type": "string"}, "name": {"type": "string"}, "description": {"type": "string"}, "created_datetime": {"format": "date-time", "type": "string"}, "updated_datetime": {"format": "date-time", "type": "string"}, "users": {"items": {"type": "string"}, "type": "array"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "Ticket": {"description": "A Ticket is a conversation between a company and a user.", "required": ["sender", "requester", "receiver", "messages", "channel", "via"], "type": "object", "properties": {"sender": {"example": {"name": "Sender Doe", "firstname": "Sender", "lastname": "Doe", "id": 7, "email": "sender@gorgias.io"}, "description": "The user who created this ticket. Most of the time it will be the same as the sender, but not always: for example if an agent created the ticket on behalf of a user, the agent would be the sender when the user would be the requester.", "$ref": "#/definitions/User"}, "requester": {"example": {"name": "Sender Doe", "firstname": "Sender", "id": 7, "lastname": "Doe", "channels": [{"address": "receiver@gorgias.io", "id": 451654, "type": "email"}], "customer": {"orders": [{"price": 500, "item": "Washing machine", "currency": "dollars"}, {"price": 12, "item": "Hammer", "currency": "dollars"}, {"price": 80, "item": "Game of Thrones - Blu-ray Integral", "currency": "dollars"}]}, "email": "sender@gorgias.io"}, "description": "The user who is requesting something in this ticket.", "$ref": "#/definitions/User"}, "receiver": {"example": {"name": "Receiver Doe", "firstname": "Receiver", "lastname": "Doe", "id": 8, "email": "receiver@gorgias.io"}, "description": "The original receiver of the ticket.", "$ref": "#/definitions/User"}, "assignee_user": {"example": {"name": "John Smith", "firstname": "John", "lastname": "Smith", "id": 4, "email": "agent-smith@gorgias.io"}, "description": "The agent assigned to this ticket.", "$ref": "#/definitions/User"}, "tags": {"example": [{"name": "refund", "id": 5, "uri": "https://gorgias.gorgias.io/api/tags/5/"}], "items": {"$ref": "#/definitions/Tag"}, "description": "The tags associated with the ticket.", "type": "array"}, "messages": {"items": {"$ref": "#/definitions/TicketMessage"}, "description": "All the messages of the ticket.", "type": "array"}, "customer_ratings": {"items": {"$ref": "#/definitions/CustomerRating"}, "description": "The ratings given by users about the quality of the support on this ticket.", "type": "array"}, "id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "external_id": {"description": "Another ID for the ticket. Can be set freely.", "type": "string"}, "status": {"default": "new", "description": "Ticket status is used for managing the lifecycle of the ticket", "type": "string"}, "priority": {"default": "normal", "description": "Indicates the importance of the ticket.", "type": "string"}, "channel": {"description": "The channel used to communicate with the user on this ticket.", "type": "string"}, "via": {"description": "Indicates via which means this ticket was created. For example, a ticket of channel `email` could have been created through the API because of an integration; the `via` would then be `api`.", "type": "string"}, "from_agent": {"description": "Indicates whether the ticket was created by an agent or by a user.", "type": "boolean"}, "subject": {"example": "Refund request", "description": "The subject of the ticket.", "type": "string"}, "meta": {"example": {}, "description": "Extra metadatas about the ticket.", "type": "string"}, "created_datetime": {"format": "date-time", "description": "When the ticket was created.", "type": "string"}, "opened_datetime": {"format": "date-time", "description": "When the ticket was opened for the first time.", "type": "string"}, "updated_datetime": {"format": "date-time", "description": "When the ticket was updated for the last time.", "type": "string"}, "closed_datetime": {"format": "date-time", "description": "When the ticket was closed for the last time.", "type": "string"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}}}, "ActivityEvent": {"required": ["type"], "type": "object", "properties": {"id": {"format": "int32", "description": "Primary key of the object", "type": "integer"}, "uri": {"description": "URI of the object", "readOnly": true, "type": "string"}, "object_type": {"type": "string"}, "object_id": {"format": "int32", "type": "integer"}, "data": {"type": "string"}, "type": {"description": "Event types are used to discriminate between events.", "type": "string"}, "created_datetime": {"format": "date-time", "readOnly": true, "type": "string"}, "user_id": {"format": "int32", "type": "integer"}, "object": {"$ref": "#/definitions/Ticket"}}}}, "description": "The new generation helpdesk", "info": {"title": "Gorgias", "version": "0.0.1"}, "tags": [{"name": "Activity", "description": "Latest activity when the user is walking around."}, {"name": "Ticket", "description": "Contains all the endpoints about how to manage Tickets and their Messages."}, {"name": "User", "description": "Contains all the endpoints about how to manage users and their roles / groups / organisations."}, {"name": "Upload", "description": "Receive a list of files and upload them in Google Storage"}, {"name": "Integration", "description": "Allows users to create or enable integrations for their account"}, {"name": "Rule", "description": "Endpoints to manipulate Rules."}, {"name": "Statistics", "description": "Contains every resources concerning the statistics."}], "swagger": "2.0", "paths": {"/api/events/": {"get": {"tags": ["Event"], "produces": ["application/json"], "description": "Get all events of the account of the user, paginated.", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Event"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all events"}}, "/api/events/{id}/": {}, "/api/actions/": {"get": {"tags": ["Action"], "produces": ["application/json"], "description": "Get all action of the account of the user, paginated.", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Action"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all actions"}, "post": {"tags": ["Action"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Action"}}, "404": {"description": "Not found."}}, "summary": "Create an action", "produces": ["application/json"], "description": "Create a new action", "consumes": ["application/json"]}}, "/api/actions/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Action"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Action"], "summary": "Get a single action", "produces": ["application/json"], "description": "Get an action based on {id}"}, "delete": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "tags": ["Action"], "summary": "Delete an action", "produces": ["application/json"], "description": "Delete an action"}, "put": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/Action"}}, "404": {"description": "Not found."}}, "tags": ["Action"], "summary": "Update an action", "produces": ["application/json"], "description": "Update an action", "consumes": ["application/json"]}}, "/api/activity/": {"post": {"tags": ["Activity"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Activity"}}, "404": {"description": "Not found."}}, "summary": "Create activities", "produces": ["application/json"], "description": "Takes a list of `EventSchema` and dumps a `ActivitySchema`", "consumes": ["application/json"]}}, "/api/activity/{id}/": {}, "/api/tickets/": {"get": {"parameters": [{"$ref": "#/parameters/view_id"}, {"$ref": "#/parameters/page"}, {"$ref": "#/parameters/per_page"}], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Retrieve a list of tickets", "produces": ["application/json"], "description": "Retrieve a list of tickets. If the {view} argument is present in the URL, then the list will correspond to this view's constraints.\n"}, "delete": {"parameters": [{"name": "body", "in": "body", "schema": {"example": {"ids": [1, 7, 78, 12, 546]}, "type": "object", "properties": {"ids": {"items": {"format": "int64", "minimum": 1, "type": "integer"}, "description": "an array of ids of tickets you want to delete", "type": "array"}}}}], "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "tags": ["Ticket"], "summary": "Delete a batch of tickets", "produces": ["application/json"], "description": "Delete a batch of tickets"}, "put": {"parameters": [{"name": "body", "in": "body", "schema": {"example": {"view": {"id": 1}}, "type": "object", "properties": {"view": {"schema": {"$ref": "#/definitions/View"}, "type": "object"}}}}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Perform a ticket list query with an unsaved view", "produces": ["application/json"], "description": "When experimenting with views in the app sometimes it's useful to query something without saving a view", "consumes": ["application/json"]}, "post": {"parameters": [{"name": "body", "in": "body", "description": "the data of the Ticket you want to create", "schema": {"$ref": "#/definitions/Ticket"}}], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Ticket"}}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Create a new Ticket", "produces": ["application/json"], "description": "Create a new Ticket along with its Messages.", "consumes": ["application/json"]}}, "/api/tickets/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Ticket"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Retrieve a single Ticket", "produces": ["application/json"], "description": "Retrieve a single Ticket, identified by the URL parameter {id}."}, "put": {"parameters": [{"$ref": "#/parameters/id"}, {"name": "body", "in": "body", "description": "the data of the Ticket you want to update", "schema": {"$ref": "#/definitions/Ticket"}}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/Ticket"}}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Update a Ticket", "produces": ["application/json"], "description": "Update a Ticket identified by the URL parameter {id} and return it.", "consumes": ["application/json"]}}, "/api/tickets/{ticket_id}/messages/": {"get": {"parameters": [{"$ref": "#/parameters/ticket_id"}], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/TicketMessage"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Retrieve the list of Messages of a Ticket", "produces": ["application/json"], "description": "Retrieve the list of Messages of a Ticket identified by the URL parameter {ticket_id}"}}, "/api/tickets/{ticket_id}/messages/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/TicketMessage"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Retrieve a single TicketMessage", "produces": ["application/json"], "description": "Retrieve a single TicketMessage identified by the URL parameters {ticket_id} and {id}."}, "delete": {"parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}], "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "tags": ["Ticket"], "summary": "Delete a Message", "produces": ["application/json"], "description": "Delete a Message of a specific Ticket"}, "put": {"parameters": [{"$ref": "#/parameters/id"}, {"$ref": "#/parameters/ticket_id"}, {"name": "body", "in": "body", "description": "the new data you want to set on the Message", "schema": {"$ref": "#/definitions/TicketMessage"}}], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/TicketMessage"}}, "404": {"description": "Not found."}}, "tags": ["Ticket"], "summary": "Update a TicketMessage", "produces": ["application/json"], "description": "Update a TicketMessage and return it.", "consumes": ["application/json"]}}, "/api/users/{user_id}/tickets/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Ticket"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["User"], "summary": "Get all user's tickets", "produces": ["application/json"], "description": "Get all tickets of the specified user, sorted by DESC created_datetime."}}, "/api/users/{user_id}/tickets/{id}/": {}, "/api/users/": {"get": {"tags": ["User"], "produces": ["application/json"], "description": "Retrieve all users of the account of the current user, paginated.", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve list of users"}, "post": {"tags": ["User"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/User"}}, "404": {"description": "Not found."}}, "summary": "Create a user", "produces": ["application/json"], "description": "Create a new user linked to the current user's account. It's role can be any combination of \"user\", \"agent\" and \"admin\".\n", "consumes": ["application/json"]}}, "/api/users/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/User"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["User"], "summary": "Retrieve a single user", "produces": ["application/json"], "description": "Retrieve a single user, identified by the URL parameter {id}. If {id} = 0, the current user is returned.\n"}, "delete": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "tags": ["User"], "summary": "Delete a user", "produces": ["application/json"], "description": "Delete a user identified by the URL parameter {id}."}, "put": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/User"}}, "404": {"description": "Not found."}}, "tags": ["User"], "summary": "Update a user", "produces": ["application/json"], "description": "Update a user's fields, and return it's new version.", "consumes": ["application/json"]}}, "/api/users/{user_id}/events/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Event"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["User"], "summary": "Get all user's events", "produces": ["application/json"], "description": "Get all events of the specified user, sorted by DESC created_datetime."}}, "/api/users/{user_id}/events/{id}/": {}, "/api/users/roles/": {"get": {"tags": ["User"], "produces": ["application/json"], "description": "Retrieve all roles of the account of the current user, paginated.", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Role"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Retrieve list of roles"}, "post": {"tags": ["User"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Role"}}, "404": {"description": "Not found."}}, "summary": "Create a role", "produces": ["application/json"], "description": "Create a new role linked to the current user's account.\n", "consumes": ["application/json"]}}, "/api/users/roles/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Role"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["User"], "summary": "Retrieve a single role", "produces": ["application/json"], "description": "Retrieve a single role, identified by the URL parameter {id}.\n"}}, "/api/upload/": {}, "/api/upload/{id}/": {}, "/api/integrations/": {"get": {"tags": ["Integration"], "produces": ["application/json"], "description": "Get the list of all integrations (active or not) of the current account", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/User"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all integration"}, "post": {"tags": ["Integration"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Integration"}}, "404": {"description": "Not found."}}, "summary": "Create an integration", "produces": ["application/json"], "description": "Create a new integration with a new or existing connection to an external service.", "consumes": ["application/json"]}}, "/api/integrations/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Integration"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Integration"], "summary": "Get an integration", "produces": ["application/json"], "description": "Fetch an integration's data with the linked connection."}, "delete": {"tags": ["Integration"], "produces": ["application/json"], "description": "Delete an existing integration with the linked connection along", "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "summary": "Delete an integration"}, "put": {"tags": ["Integration"], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/Integration"}}, "404": {"description": "Not found."}}, "summary": "Update an integration", "produces": ["application/json"], "description": "Update an existing integration or its connection", "consumes": ["application/json"]}}, "/api/rules/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Rule"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Rule"], "summary": "Fetch all rules", "produces": ["application/json"], "description": "Fetch all the rules of the current account"}, "post": {"tags": ["Rule"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Rule"}}, "404": {"description": "Not found."}}, "summary": "Create a Rule", "produces": ["application/json"], "description": "Create a new Rule", "consumes": ["application/json"]}}, "/api/rules/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Rule"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Rule"], "summary": "Fetch a single Rule", "produces": ["application/json"], "description": "Fetch a single Rule"}, "put": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/Rule"}}, "404": {"description": "Not found."}}, "tags": ["Rule"], "summary": "Edit a Rule", "produces": ["application/json"], "description": "Edit an existing Rule", "consumes": ["application/json"]}}, "/api/stats/": {"get": {"tags": ["Statistics"], "produces": ["application/json"], "description": "Get scalar statistics about tickets.", "responses": {"200": {"schema": {"$ref": "#/definitions/Stats"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get scalar statistics about tickets."}}, "/api/widgets/": {"get": {"tags": ["Widget"], "produces": ["application/json"], "description": "Get all widgets of the account of the user, paginated.", "responses": {"200": {"schema": {"items": {"$ref": "#/definitions/Widget"}, "type": "array"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "summary": "Get all widgets paginated"}, "put": {"tags": ["Widget"], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"items": {"$ref": "#/definitions/Widget"}, "type": "array"}}, "404": {"description": "Not found."}}, "summary": "Create/Update/Delete widgets", "produces": ["application/json"], "description": "Create/Update/Delete widgets of current account and passed context.", "consumes": ["application/json"]}, "post": {"tags": ["Widget"], "responses": {"400": {"description": "Bad request."}, "201": {"schema": {"$ref": "#/definitions/Widget"}}, "404": {"description": "Not found."}}, "summary": "Create a widget", "produces": ["application/json"], "description": "Create a new widget that will be displayed in the sidebar.", "consumes": ["application/json"]}}, "/api/widgets/{id}/": {"get": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"200": {"schema": {"$ref": "#/definitions/Widget"}}, "400": {"description": "Bad request."}, "404": {"description": "Not found."}}, "tags": ["Widget"], "summary": "Get a single widget", "produces": ["application/json"], "description": "Get a widget based on {id}"}, "delete": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "404": {"description": "Not found."}, "204": {"description": "No content."}}, "tags": ["Widget"], "summary": "Delete a widget", "produces": ["application/json"], "description": "Delete a widget"}, "put": {"parameters": [{"$ref": "#/parameters/id"}], "responses": {"400": {"description": "Bad request."}, "202": {"schema": {"$ref": "#/definitions/Widget"}}, "404": {"description": "Not found."}}, "tags": ["Widget"], "summary": "Update a widget", "produces": ["application/json"], "description": "Update a widget", "consumes": ["application/json"]}}}}